<script>
    _PAGE_VERSION_ = "2f27c95f2c0d7fbf6cbba8204a9fd0d2a8be8352"
</script>
<!DOCTYPE html>
<!-- facebook 分享用 -->
<script src="https://connect.facebook.net/en_US/sdk.js" async></script>
<link rel="stylesheet" href="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/account.7d1baf2a.css"/>
<link rel="stylesheet" href="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/account.4d27d21b.css"/>
<script type="module">
    function r(t) {
        let a = history[t];
        return function() {
            let n = a.apply(this, [...arguments])
              , e = new Event(t);
            return e.detail = {
                ...arguments
            },
            window.dispatchEvent(e),
            n
        }
    }
    history.pushState = r("pushState");
    history.replaceState = r("replaceState");
</script>
<style>
    astro-island,astro-slot,astro-static-slot {
        display: contents
    }
</style>
<script>
    (()=>{
        var e = async t=>{
            await (await t())()
        }
        ;
        (self.Astro || (self.Astro = {})).load = e;
        window.dispatchEvent(new Event("astro:load"));
    }
    )();
    ;(()=>{
        var b = Object.defineProperty;
        var f = (c,o,i)=>o in c ? b(c, o, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: i
        }) : c[o] = i;
        var l = (c,o,i)=>(f(c, typeof o != "symbol" ? o + "" : o, i),
        i);
        var p;
        {
            let c = {
                0: t=>m(t),
                1: t=>i(t),
                2: t=>new RegExp(t),
                3: t=>new Date(t),
                4: t=>new Map(i(t)),
                5: t=>new Set(i(t)),
                6: t=>BigInt(t),
                7: t=>new URL(t),
                8: t=>new Uint8Array(t),
                9: t=>new Uint16Array(t),
                10: t=>new Uint32Array(t)
            }
              , o = t=>{
                let[e,r] = t;
                return e in c ? c[e](r) : void 0
            }
              , i = t=>t.map(o)
              , m = t=>typeof t != "object" || t === null ? t : Object.fromEntries(Object.entries(t).map(([e,r])=>[e, o(r)]));
            customElements.get("astro-island") || customElements.define("astro-island", (p = class extends HTMLElement {
                constructor() {
                    super(...arguments);
                    l(this, "Component");
                    l(this, "hydrator");
                    l(this, "hydrate", async()=>{
                        var d;
                        if (!this.hydrator || !this.isConnected)
                            return;
                        let e = (d = this.parentElement) == null ? void 0 : d.closest("astro-island[ssr]");
                        if (e) {
                            e.addEventListener("astro:hydrate", this.hydrate, {
                                once: !0
                            });
                            return
                        }
                        let r = this.querySelectorAll("astro-slot")
                          , a = {}
                          , h = this.querySelectorAll("template[data-astro-template]");
                        for (let n of h) {
                            let s = n.closest(this.tagName);
                            s != null && s.isSameNode(this) && (a[n.getAttribute("data-astro-template") || "default"] = n.innerHTML,
                            n.remove())
                        }
                        for (let n of r) {
                            let s = n.closest(this.tagName);
                            s != null && s.isSameNode(this) && (a[n.getAttribute("name") || "default"] = n.innerHTML)
                        }
                        let u;
                        try {
                            u = this.hasAttribute("props") ? m(JSON.parse(this.getAttribute("props"))) : {}
                        } catch (n) {
                            let s = this.getAttribute("component-url") || "<unknown>"
                              , y = this.getAttribute("component-export");
                            throw y && (s += ` (export ${y})`),
                            console.error(`[hydrate] Error parsing props for component ${s}`, this.getAttribute("props"), n),
                            n
                        }
                        await this.hydrator(this)(this.Component, u, a, {
                            client: this.getAttribute("client")
                        }),
                        this.removeAttribute("ssr"),
                        this.dispatchEvent(new CustomEvent("astro:hydrate"))
                    }
                    );
                    l(this, "unmount", ()=>{
                        this.isConnected || this.dispatchEvent(new CustomEvent("astro:unmount"))
                    }
                    )
                }
                disconnectedCallback() {
                    document.removeEventListener("astro:after-swap", this.unmount),
                    document.addEventListener("astro:after-swap", this.unmount, {
                        once: !0
                    })
                }
                connectedCallback() {
                    if (!this.hasAttribute("await-children") || document.readyState === "interactive" || document.readyState === "complete")
                        this.childrenConnectedCallback();
                    else {
                        let e = ()=>{
                            document.removeEventListener("DOMContentLoaded", e),
                            r.disconnect(),
                            this.childrenConnectedCallback()
                        }
                          , r = new MutationObserver(()=>{
                            var a;
                            ((a = this.lastChild) == null ? void 0 : a.nodeType) === Node.COMMENT_NODE && this.lastChild.nodeValue === "astro:end" && (this.lastChild.remove(),
                            e())
                        }
                        );
                        r.observe(this, {
                            childList: !0
                        }),
                        document.addEventListener("DOMContentLoaded", e)
                    }
                }
                async childrenConnectedCallback() {
                    let e = this.getAttribute("before-hydration-url");
                    e && await import(e),
                    this.start()
                }
                start() {
                    let e = JSON.parse(this.getAttribute("opts"))
                      , r = this.getAttribute("client");
                    if (Astro[r] === void 0) {
                        window.addEventListener(`astro:${r}`, ()=>this.start(), {
                            once: !0
                        });
                        return
                    }
                    Astro[r](async()=>{
                        let a = this.getAttribute("renderer-url")
                          , [h,{default: u}] = await Promise.all([import(this.getAttribute("component-url")), a ? import(a) : ()=>()=>{}
                        ])
                          , d = this.getAttribute("component-export") || "default";
                        if (!d.includes("."))
                            this.Component = h[d];
                        else {
                            this.Component = h;
                            for (let n of d.split("."))
                                this.Component = this.Component[n]
                        }
                        return this.hydrator = u,
                        this.hydrate
                    }
                    , e, this)
                }
                attributeChangedCallback() {
                    this.hydrate()
                }
            }
            ,
            l(p, "observedAttributes", ["props"]),
            p))
        }
    }
    )();
</script>
<script>
    (()=>{
        var r = (i,c,s)=>{
            let n = async()=>{
                await (await i())()
            }
              , t = new IntersectionObserver(e=>{
                for (let o of e)
                    if (o.isIntersecting) {
                        t.disconnect(),
                        n();
                        break
                    }
            }
            );
            for (let e of s.children)
                t.observe(e)
        }
        ;
        (self.Astro || (self.Astro = {})).visible = r;
        window.dispatchEvent(new Event("astro:visible"));
    }
    )();
</script>
<head></head>
<div id="astro-container" class="bg-slate-200 !pb-8">
    <astro-island uid="Z22lU2c" prefix="r0" component-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/ShareStores.cbb6b3b5.js" component-export="default" renderer-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/client.f80b1d52.js" props="{&quot;customerId&quot;:[0,&quot;{{customer.id}}&quot;],&quot;email&quot;:[0,&quot;{{customer.email}}&quot;]}" ssr="" client="load" before-hydration-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/astro_scripts/before-hydration.js.eb828c52.js" opts="{&quot;name&quot;:&quot;ShareStores&quot;,&quot;value&quot;:true}"></astro-island>
    <div class="hidden md:block">
        <astro-island uid="1K5jQ8" prefix="r1" component-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/index.951634c4.js" component-export="default" renderer-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/client.f80b1d52.js" props="{}" ssr="" client="visible" before-hydration-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/astro_scripts/before-hydration.js.eb828c52.js" opts="{&quot;name&quot;:&quot;AccountCenter&quot;,&quot;value&quot;:true}" await-children="">
            <div class=" max-w-[1200px] mx-auto ">
                <div class="!py-6 text-body-medium text-neutral-30 sm:px-4">
                    <a href="/">Home</a>
                    <span class="!mx-2">/</span>
                    <span>Account</span>
                </div>
                <div class="flex min-h-screen">
                    <div class="w-[24%] min-w-[230px] bg-white !p-8 rounded-2xl">
                        <h2 class="text-xl pb-[1.25rem]">MY ACCOUNT</h2>
                        <div class="!mb-8">
                            <p class="text-lg !pb-2">My Account</p>
                            <a class="flex !pl-2 text-sm leading-10 cursor-pointer rounded hover:bg-[#F5F5F5] ">
                                <span class="flex items-center ">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 -2 12 24">
                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M3.47437 12.1141L3.93267 12.6306C5.08507 13.908 6.81898 13.9433 7.99609 12.7233L8.05744 12.6593C8.56671 12.1114 9.04851 11.5628 9.50267 11.0133C11.0151 11.5128 12 12.3276 12 13.248C12 14.7679 9.31371 16 6 16C2.68629 16 0 14.7679 0 13.248C0 12.3195 1.00243 11.4984 2.53795 11C2.83797 11.3713 3.15027 11.7426 3.47437 12.1141Z" fill="#4F4F4F"/>
                                        <ellipse cx="6" cy="6.51523" rx="5" ry="6.51523" fill="#4F4F4F"/>
                                        <circle cx="6.07414" cy="5.5" r="1.5" fill="white"/>
                                    </svg>
                                </span>
                                <span class="!pl-2 hover:text-[#28BE44] ">Address Book</span>
                            </a>
                            <a class="flex !pl-2 text-sm leading-10 cursor-pointer rounded hover:bg-[#F5F5F5] ">
                                <span class="flex items-center ">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                                        <rect width="24" height="24" fill="white"/>
                                        <rect x="6" y="5" width="12" height="14" rx="1" fill="#4F4F4F"/>
                                        <path d="M9 9.5H15" stroke="white" stroke-linecap="round"/>
                                        <path d="M9 13.5H11" stroke="white" stroke-linecap="round"/>
                                    </svg>
                                </span>
                                <span class="!pl-2 hover:text-[#28BE44] ">My Order</span>
                            </a>
                        </div>
                        <div class="!mb-8">
                            <p class="text-lg !pb-2">My Assets</p>
                            <a class="flex !pl-2 text-sm leading-10 cursor-pointer rounded hover:bg-[#F5F5F5] ">
                                <span class="flex items-center ">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <rect x="20" y="6" width="12" height="16" rx="1" transform="rotate(90 20 6)" fill="#4F4F4F"/>
                                        <circle cx="4.02648" cy="12" r="1" fill="#F7F9F9"/>
                                        <circle cx="20.0265" cy="12" r="1" fill="#F7F9F9"/>
                                        <circle cx="14.0741" cy="14.111" r="1" fill="white"/>
                                        <circle cx="9.92464" cy="10.1964" r="1" fill="white"/>
                                        <path d="M13.8057 9.60411C14.0026 9.41049 14.3191 9.41315 14.5127 9.61005C14.6848 9.78506 14.7019 10.0546 14.5652 10.2484L14.5068 10.3171L10.141 14.6102C9.94414 14.8038 9.62757 14.8011 9.43396 14.6042C9.26185 14.4292 9.24483 14.1597 9.38146 13.9659L9.43989 13.8972L13.8057 9.60411Z" fill="white"/>
                                    </svg>
                                </span>
                                <span class="!pl-2 hover:text-[#28BE44] ">My Coupon</span>
                            </a>
                            <a class="flex !pl-2 text-sm leading-10 cursor-pointer rounded hover:bg-[#F5F5F5] ">
                                <span class="flex items-center ">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <rect width="24" height="24" fill="white"/>
                                        <path d="M12.4395 7.30479L11.9981 7.74847L11.5566 7.30286C9.83698 5.57249 7.0397 5.56477 5.31237 7.28743L5.29695 7.30286C3.56768 9.04094 3.56768 11.8516 5.29695 13.5916L11.2848 19.701C11.6723 20.0945 12.3046 20.1003 12.6998 19.7145L12.7133 19.701L18.7031 13.5916C20.4323 11.8535 20.4323 9.04287 18.7031 7.30286C16.9834 5.57249 14.1862 5.56477 12.4588 7.2855L12.4395 7.30479Z" fill="#4F4F4F"/>
                                        <path d="M14 13C13.7084 13.7574 12.9231 14.3 12 14.3C11.0769 14.3 10.2916 13.7574 10 13" stroke="white" stroke-linecap="round"/>
                                    </svg>
                                </span>
                                <span class="!pl-2 hover:text-[#28BE44] ">My Care</span>
                            </a>
                            <a class="flex !pl-2 text-sm leading-10 cursor-pointer rounded hover:bg-[#F5F5F5] ">
                                <span class="flex items-center ">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="-4 -2 24 24">
                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M9.41881 13.7202C9.15662 13.5823 8.84338 13.5823 8.58119 13.7202L5.32406 15.4326C4.66379 15.7797 3.8921 15.219 4.0182 14.4838L4.64026 10.8569C4.69034 10.565 4.59354 10.2671 4.38142 10.0603L1.74635 7.49174C1.21218 6.97106 1.50694 6.06388 2.24514 5.95662L5.88673 5.42746C6.17987 5.38487 6.43327 5.20075 6.56437 4.93513L8.19294 1.63529C8.52307 0.966365 9.47693 0.966366 9.80706 1.63529L11.4356 4.93513C11.5667 5.20076 11.8201 5.38487 12.1133 5.42746L15.7549 5.95662C16.4931 6.06388 16.7878 6.97106 16.2537 7.49174L13.6186 10.0603C13.4065 10.2671 13.3097 10.565 13.3597 10.8569L13.9818 14.4838C14.1079 15.219 13.3362 15.7797 12.6759 15.4326L9.41881 13.7202Z" fill="#4F4F4F"/>
                                        <path d="M11 9C10.7084 9.75745 9.92308 10.3 9 10.3C8.07692 10.3 7.29155 9.75745 7 9" stroke="white" stroke-linecap="round"/>
                                    </svg>
                                </span>
                                <span class="!pl-2 hover:text-[#28BE44] ">My Rewards</span>
                            </a>
                            <a class="flex !pl-2 text-sm leading-10 cursor-pointer rounded hover:bg-[#F5F5F5] ">
                                <span class="flex items-center ">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
                                        <path d="M18.4 13.2631V19.1579C18.4 19.623 18.0418 20 17.6 20H6.4C5.95817 20 5.6 19.623 5.6 19.1579V13.2631H18.4ZM14 4C15.5464 4 16.8 5.31958 16.8 6.94737C16.8 7.39976 16.7032 7.82834 16.5302 8.21141L19.2 8.21053C19.6418 8.21053 20 8.58755 20 9.05264V11.5789C20 12.044 19.6418 12.421 19.2 12.421H4.8C4.35818 12.421 4 12.044 4 11.5789V9.05264C4 8.58755 4.35818 8.21053 4.8 8.21053L7.46984 8.21141C7.29682 7.82834 7.2 7.39976 7.2 6.94737C7.2 5.31958 8.4536 4 9.99999 4C10.784 4 11.4927 4.33917 12.001 4.88571C12.5073 4.33917 13.216 4 14 4ZM9.99999 5.68421C9.33726 5.68421 8.8 6.24975 8.8 6.94737C8.8 7.60396 9.27591 8.14354 9.88443 8.20475L9.99999 8.21053H11.2V6.94737C11.2 6.29078 10.7241 5.7512 10.1156 5.69L9.99999 5.68421ZM14 5.68421L13.8844 5.69C13.3139 5.74738 12.86 6.22521 12.8054 6.82572L12.8 6.94737V8.21053H14L14.1155 8.20475C14.7241 8.14354 15.2 7.60396 15.2 6.94737C15.2 6.29078 14.7241 5.7512 14.1155 5.69L14 5.68421Z" fill="#4F4F4F"/>
                                    </svg>
                                </span>
                                <span class="!pl-2 hover:text-[#28BE44] ">My Gift Card</span>
                            </a>
                        </div>
                    </div>
                    <div class="bg-white !ml-6 block rounded-2xl flex-1 !p-8 md:p-6 relative overflow-hidden">
                        <h2 class="text-[#222] text-xl font-bold"></h2>
                    </div>
                </div>
            </div>
            <!--astro:end-->
        </astro-island>
    </div>
    <div class="md:hidden">
        <astro-island uid="2ehvil" prefix="r2" component-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/mobile.8f229167.js" component-export="default" renderer-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/client.f80b1d52.js" props="{}" ssr="" client="visible" before-hydration-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/astro_scripts/before-hydration.js.eb828c52.js" opts="{&quot;name&quot;:&quot;AccountCenterMobile&quot;,&quot;value&quot;:true}" await-children="">
            <div class="min-h-screen">
                <div class="!py-6 text-body-medium text-neutral-30 sm:px-4">
                    <a href="/">Home</a>
                    <span class="!mx-2">/</span>
                    <span>Account</span>
                </div>
                <div>
                    <div class="!p-6 bg-white relative">
                        <div class="text-center !py-4">
                            <mkt-icon name="loading" class="animate-spin" size="30" color="rgba(0, 0, 0, 0.2)"></mkt-icon>
                        </div>
                        <h2 class="text-[#222] text-xl font-bold"></h2>
                    </div>
                </div>
            </div>
            <!--astro:end-->
        </astro-island>
    </div>
</div>


{% schema %}
{
    "name": "Account Center",
    "target": "section",
    "settings": [
    ]
}
{% endschema %}