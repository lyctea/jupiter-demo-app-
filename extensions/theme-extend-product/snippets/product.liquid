<script>
  _PAGE_VERSION_ = '791682c0bcc424540f75f54fa2f7acfb5e55b28a';
</script>
<!doctype html>
<link rel="stylesheet" href="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/account.73e1267c.css">
<link rel="stylesheet" href="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/product.bd8a9ba8.css">
<script
  type="module"
  src="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/hoisted.6a69792d.js"
></script>
<style>
  astro-island,
  astro-slot,
  astro-static-slot {
    display: contents;
  }
</style>
<script>
  (() => {
    var i = (t) => {
      let e = async () => {
        await (
          await t()
        )();
      };
      'requestIdleCallback' in window ? window.requestIdleCallback(e) : setTimeout(e, 200);
    };
    (self.Astro || (self.Astro = {})).idle = i;
    window.dispatchEvent(new Event('astro:idle'));
  })();
  (() => {
    var b = Object.defineProperty;
    var f = (c, o, i) =>
      o in c
        ? b(c, o, {
            enumerable: !0,
            configurable: !0,
            writable: !0,
            value: i,
          })
        : (c[o] = i);
    var l = (c, o, i) => (f(c, typeof o != 'symbol' ? o + '' : o, i), i);
    var p;
    {
      let c = {
          0: (t) => m(t),
          1: (t) => i(t),
          2: (t) => new RegExp(t),
          3: (t) => new Date(t),
          4: (t) => new Map(i(t)),
          5: (t) => new Set(i(t)),
          6: (t) => BigInt(t),
          7: (t) => new URL(t),
          8: (t) => new Uint8Array(t),
          9: (t) => new Uint16Array(t),
          10: (t) => new Uint32Array(t),
        },
        o = (t) => {
          let [e, r] = t;
          return e in c ? c[e](r) : void 0;
        },
        i = (t) => t.map(o),
        m = (t) =>
          typeof t != 'object' || t === null ? t : Object.fromEntries(Object.entries(t).map(([e, r]) => [e, o(r)]));
      customElements.get('astro-island') ||
        customElements.define(
          'astro-island',
          ((p = class extends HTMLElement {
            constructor() {
              super(...arguments);
              l(this, 'Component');
              l(this, 'hydrator');
              l(this, 'hydrate', async () => {
                var d;
                if (!this.hydrator || !this.isConnected) return;
                let e = (d = this.parentElement) == null ? void 0 : d.closest('astro-island[ssr]');
                if (e) {
                  e.addEventListener('astro:hydrate', this.hydrate, {
                    once: !0,
                  });
                  return;
                }
                let r = this.querySelectorAll('astro-slot'),
                  a = {},
                  h = this.querySelectorAll('template[data-astro-template]');
                for (let n of h) {
                  let s = n.closest(this.tagName);
                  s != null &&
                    s.isSameNode(this) &&
                    ((a[n.getAttribute('data-astro-template') || 'default'] = n.innerHTML), n.remove());
                }
                for (let n of r) {
                  let s = n.closest(this.tagName);
                  s != null && s.isSameNode(this) && (a[n.getAttribute('name') || 'default'] = n.innerHTML);
                }
                let u;
                try {
                  u = this.hasAttribute('props') ? m(JSON.parse(this.getAttribute('props'))) : {};
                } catch (n) {
                  let s = this.getAttribute('component-url') || '<unknown>',
                    y = this.getAttribute('component-export');
                  throw (
                    (y && (s += ` (export ${y})`),
                    console.error(`[hydrate] Error parsing props for component ${s}`, this.getAttribute('props'), n),
                    n)
                  );
                }
                await this.hydrator(this)(this.Component, u, a, {
                  client: this.getAttribute('client'),
                }),
                  this.removeAttribute('ssr'),
                  this.dispatchEvent(new CustomEvent('astro:hydrate'));
              });
              l(this, 'unmount', () => {
                this.isConnected || this.dispatchEvent(new CustomEvent('astro:unmount'));
              });
            }
            disconnectedCallback() {
              document.removeEventListener('astro:after-swap', this.unmount),
                document.addEventListener('astro:after-swap', this.unmount, {
                  once: !0,
                });
            }
            connectedCallback() {
              if (
                !this.hasAttribute('await-children') ||
                document.readyState === 'interactive' ||
                document.readyState === 'complete'
              )
                this.childrenConnectedCallback();
              else {
                let e = () => {
                    document.removeEventListener('DOMContentLoaded', e),
                      r.disconnect(),
                      this.childrenConnectedCallback();
                  },
                  r = new MutationObserver(() => {
                    var a;
                    ((a = this.lastChild) == null ? void 0 : a.nodeType) === Node.COMMENT_NODE &&
                      this.lastChild.nodeValue === 'astro:end' &&
                      (this.lastChild.remove(), e());
                  });
                r.observe(this, {
                  childList: !0,
                }),
                  document.addEventListener('DOMContentLoaded', e);
              }
            }
            async childrenConnectedCallback() {
              let e = this.getAttribute('before-hydration-url');
              e && (await import(e)), this.start();
            }
            start() {
              let e = JSON.parse(this.getAttribute('opts')),
                r = this.getAttribute('client');
              if (Astro[r] === void 0) {
                window.addEventListener(`astro:${r}`, () => this.start(), {
                  once: !0,
                });
                return;
              }
              Astro[r](
                async () => {
                  let a = this.getAttribute('renderer-url'),
                    [h, { default: u }] = await Promise.all([
                      import(this.getAttribute('component-url')),
                      a ? import(a) : () => () => {},
                    ]),
                    d = this.getAttribute('component-export') || 'default';
                  if (!d.includes('.')) this.Component = h[d];
                  else {
                    this.Component = h;
                    for (let n of d.split('.')) this.Component = this.Component[n];
                  }
                  return (this.hydrator = u), this.hydrate;
                },
                e,
                this
              );
            }
            attributeChangedCallback() {
              this.hydrate();
            }
          }),
          l(p, 'observedAttributes', ['props']),
          p)
        );
    }
  })();
</script>
<script>
  (() => {
    var r = (i, c, s) => {
      let n = async () => {
          await (
            await i()
          )();
        },
        t = new IntersectionObserver((e) => {
          for (let o of e)
            if (o.isIntersecting) {
              t.disconnect(), n();
              break;
            }
        });
      for (let e of s.children) t.observe(e);
    };
    (self.Astro || (self.Astro = {})).visible = r;
    window.dispatchEvent(new Event('astro:visible'));
  })();
</script>
<script>
  (() => {
    var e = async (t) => {
      await (
        await t()
      )();
    };
    (self.Astro || (self.Astro = {})).load = e;
    window.dispatchEvent(new Event('astro:load'));
  })();
</script>
<head></head>
<div id="astro-container" class="bg-slate-200 !pb-8">
  <astro-island
    uid="1Rkig2"
    prefix="r3"
    component-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/ProductSection.d63b497c.js"
    component-export="default"
    renderer-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/client.f80b1d52.js"
    props="{&quot;handle&quot;:[0,&quot;{{product.handle}}&quot;]}"
    ssr=""
    client="load"
    before-hydration-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/astro_scripts/before-hydration.js.30823ac8.js"
    opts="{&quot;name&quot;:&quot;ProductSection&quot;,&quot;value&quot;:true}"
    await-children=""
  >
    <div>
      <astro-slot>
        <div class="container pt-6">
          <nav aria-label=" Breadcrumb">
            <ol role="list" class="flex items-center gap-1 text-sm text-gray-600">
              <li>
                <a href="/" class="block text-gray-800 transition hover:text-gray-700">
                  <span class="sr-only">Home</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                  </svg>
                </a>
              </li>
              <li>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                </svg>
              </li>
              <li>
                <div class="block transition hover:text-gray-700">{{ product.title }}</div>
              </li>
            </ol>
          </nav>
        </div>
        <div class="flex flex-col justify-center">
          <div class="relative flex flex-col md:flex-row md:space-x-5 space-y-3 md:space-y-0 rounded-xl shadow-lg p-3 mx-auto border border-white bg-white">
            <div class="w-full md:w-1/3 bg-white grid place-items-center">
              <img
                id="product-image"
                src="{{ product.featured_image | img_url: '460x460' }}"
                alt="tailwind logo"
                class="rounded-xl"
                width="100"
                height="100"
              >
              <div id="product-swiper" class="w-[260px] hidden">
                <astro-island
                  uid="ZXxthf"
                  prefix="r1"
                  component-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/ProductSwiper.b526c333.js"
                  component-export="default"
                  renderer-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/client.f80b1d52.js"
                  props="{}"
                  ssr=""
                  client="idle"
                  before-hydration-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/astro_scripts/before-hydration.js.30823ac8.js"
                  opts="{&quot;name&quot;:&quot;ProductSwiper&quot;,&quot;value&quot;:true}"
                  await-children=""
                >
                  <div class="w-[260px] h-[260px]">
                    <div class="swiper mySwiper" style="--swiper-navigation-color:#fff;--swiper-pagination-color:#fff">
                      <div class="swiper-wrapper"></div>
                      <div class="swiper-button-prev"></div>
                      <div class="swiper-button-next"></div>
                      <div class="swiper-pagination"></div>
                    </div>
                  </div>
                  <!-- astro:end -->
                </astro-island>
              </div>
            </div>
            <div class="w-full md:w-1/3 bg-white flex flex-col space-y-2 p-3">
              <div id="product-descript" class="md:text-lg text-gray-500 text-base">{{ product.description }}</div>
              <p class="text-xl font-black text-gray-800">
                <span class="font-normal text-[#ce1818] text-[26px]">
                  <i id="product-price">{{ product.price }}</i>
                  /piece
                </span>
              </p>
            </div>
            <div class="w-full md:w-1/3 bg-white flex flex-col space-y-2 p-3 scale-75">
              <astro-island
                uid="Z19UWpv"
                prefix="r2"
                component-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/ProductVariantSelect.14f26656.js"
                component-export="default"
                renderer-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/client.f80b1d52.js"
                props="{}"
                ssr=""
                client="visible"
                before-hydration-url="https://storage-us.xtool.com/resource/static/dic/testxtool/_astro/astro_scripts/before-hydration.js.30823ac8.js"
                opts="{&quot;name&quot;:&quot;ProductVariantSelect&quot;,&quot;value&quot;:true}"
                await-children=""
              >
                <div class="flex flex-col gap-4">
                  <p class="font-bold">AC Power</p>
                  <div class="flex space-x-4">
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
                      US Plug (110V)
                    </button>
                    <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
                      US Plug (220V)
                    </button>
                  </div>
                  <p class="font-bold">Package</p>
                  <div class="flex space-x-4">
                    <button class="border border-blue-500 text-blue-500 font-bold py-2 px-4 rounded">
                      xTool P2 Standalone
                    </button>
                    <button class="border border-red-500 text-red-500 font-bold py-2 px-4 rounded">
                      xTool P2 Versatile Bundle
                    </button>
                    <button class="border border-green-500 text-green-500 font-bold py-2 px-4 rounded">
                      xTool P2 All-in-1 Bundle
                    </button>
                  </div>
                  <p class="font-bold">Would you like to add xToolCare?</p>
                  <div class="flex space-x-4">
                    <button class="bg-gradient-to-r from-red-400 to-yellow-500 text-white font-bold py-2 px-4 rounded">
                      xToolCare for P2
                    </button>
                  </div>
                </div>
                <!-- astro:end -->
              </astro-island>
            </div>
          </div>
        </div>
      </astro-slot>
    </div>
    <!-- astro:end -->
  </astro-island>
</div>
